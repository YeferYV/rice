#!/usr/bin/env bash

# #============================== Docker run archlinux ===============================#
#
# ssh -X drksl@$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' archlinux-rice)
# xhost +
# docker run -it \
#     --name archlinux-rice \
#     --ipc=host \
#     --volume=${PWD%/*}:/home/dtfls/docker-volume \
#     --volume=/run/user/1000/pipewire-0:/run/user/1000/pipewire-0 \
#     --volume=/tmp/.X11-unix:/tmp/.X11-unix \
#     archlinux:base-devel bash -uelic '
#     [[ ! -e /home/drksl ]] && {
#         useradd -mG wheel,tty drksl
#         echo root:toor | chpasswd
#         echo drksl:toor | chpasswd
#         echo "%wheel ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/sudoers.d/wheel
#         chown -R drksl:drksl /home/dtfls
#         sudo -u "drksl" bash -c "DOCKER_VOLUME=/home/dtfls/docker-volume /home/dtfls/docker-volume/rice/install"
#     }
#     chmod g+w /dev/pts/0
#     # /usr/bin/ssh-keygen -A && /bin/sshd -D & disown
#     su - drksl
#     '
#
# #=============================== Docker run ubuntu ====================================#
#
# ssh -X drksl@$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ubuntu-rice)
# xhost +
# docker run -it \
#     --name ubuntu-rice \
#     --ipc=host \
#     --volume=${PWD%/*}:/home/dtfls/docker-volume \
#     --volume=/run/user/1000/pipewire-0:/run/user/1000/pipewire-0 \
#     --volume=/tmp/.X11-unix:/tmp/.X11-unix \
#     ubuntu bash -uelic '
#     [[ ! -e /home/drksl ]] && {
#         apt update
#         DEBIAN_FRONTEND=noninteractive apt install -y sudo
#         useradd -mG sudo,tty drksl
#         echo root:toor | chpasswd
#         echo drksl:toor | chpasswd
#         echo "%sudo ALL=(ALL:ALL) NOPASSWD: ALL" > /etc/sudoers.d/sudo
#         chown -R drksl:drksl /home/dtfls
#         sudo -u "drksl" bash -c "DOCKER_VOLUME=/home/dtfls/docker-volume /home/dtfls/docker-volume/rice/install"
#     }
#     chmod g+w /dev/pts/0
#     # /usr/bin/ssh-keygen -A && service ssh start
#     su - drksl
#     '

#=================================== Dependencies ========================================#

# exit on error:
set -eu

# detect root/sudo:
[ "$(id -u)" == 0 ] || [ -e "/bin/sudo" ] || ( echo "$(tput -T ansi setaf 3) run as root or install sudo( and run without sudo ) $(tput -T ansi sgr0)" && exit 1 )
[ "$(id -u)" != 0 ] && export SUDO="sudo" || export SUDO="" # if non-root use sudo

# Arch dependencies:
[ -e /bin/pacman ] && {
  $SUDO pacman -Sy     --noconfirm base-devel bat fzf lazygit libsixel lf ripgrep tmux unzip xclip zsh glibc || # glibc required by git
  {
    $SUDO pacman-key  --init
    $SUDO pacman-key  --populate
    $SUDO pacman -Sy  --noconfirm archlinux-keyring
    $SUDO pacman -Syu --noconfirm base-devel bat fzf lazygit libsixel lf ripgrep tmux unzip xclip zsh
  }
  $SUDO curl -L https://github.com/Jguer/yay/releases/download/v12.1.2/yay_12.1.2_x86_64.tar.gz | $SUDO tar -xzf- --strip-components=1 --directory="/usr/local/bin" "yay_12.1.2_x86_64/yay"
  # yes | yay -S --noconfirm timg libplacebo-git mpv-git pipewire-pulse imagemagick poppler ghostscript # (libplacebo-git mpv-git dep)(mpv-git autodetects libsixel)(poppler mpv-pdf dep)(ghostscript imagemagick dep)  # multimedia (pre)viewer
}

# Debian dependencies:
[ -e /bin/apt ] && {
  export DEBIAN_FRONTEND=noninteractive
  $SUDO apt update
  $SUDO apt install -y curl file git gcc libglib2.0-bin libsixel-bin make ripgrep sudo unzip xclip xz-utils zsh # libglib2.0-bin --> gio
  $SUDO curl -L https://github.com/sharkdp/bat/releases/download/v0.23.0/bat-v0.23.0-x86_64-unknown-linux-gnu.tar.gz  | $SUDO tar -xzf- --directory="/tmp"  && $SUDO cp "/tmp/bat-v0.23.0-x86_64-unknown-linux-gnu/bat" "/usr/local/bin"
  $SUDO curl -L https://github.com/jesseduffield/lazygit/releases/download/v0.40.2/lazygit_0.40.2_Linux_x86_64.tar.gz | $SUDO tar -xzf- --directory="/usr/local/bin/"
  $SUDO curl -L https://github.com/gokcehan/lf/releases/download/r30/lf-linux-amd64.tar.gz                            | $SUDO tar -xzf- --directory="/usr/local/bin/"
  $SUDO curl -L https://github.com/junegunn/fzf/releases/download/0.42.0/fzf-0.42.0-linux_amd64.tar.gz                | $SUDO tar -xzf- --directory="/usr/local/bin/"
  $SUDO curl -L https://raw.githubusercontent.com/junegunn/fzf/master/shell/completion.zsh                                   --create-dirs --output "/usr/share/fzf/completion.zsh"
  $SUDO curl -L https://raw.githubusercontent.com/junegunn/fzf/master/shell/key-bindings.zsh                                 --create-dirs --output "/usr/share/fzf/key-bindings.zsh"
  $SUDO curl -L https://github.com/antontkv/tmux-appimage/releases/download/3.3a/tmux-3.3a-x86_64.appimage                   --create-dirs --output "/usr/local/bin/tmux" && $SUDO chmod +x /usr/local/bin/tmux
  $SUDO chmod o+rx "/usr/share/fzf"
  yes | sh <(curl -L https://nixos.org/nix/install) --daemon
  # nix-env --install -E 'f: (import <nixpkgs> {}).mpv-unwrapped.override { sixelSupport = true; }'                                                     # multimedia viewer
  # nix-build -o /tmp/mpv -E 'with import <nixpkgs> {}; mpv-unwrapped.override { sixelSupport = true; }' && nix-env --install $(readlink /tmp/mpv)      # multimedia viewer
  # nix-env -iA nixpkgs.timg imagemagick                                                                                                                # multimedia previewer
  # apt -y install pipewire-pulse poppler-utils ghostscript # (apt-install-mpv  doesn't support pipewire) (apt-install-timg doesn't support video/pdf)  # multimedia dependencies
}

# neovim/zsh/mpv plugins:
{
  [ -e /.dockerenv ] && echo "export APPIMAGE_EXTRACT_AND_RUN=1" >> "$HOME"/.zprofile
  # $SUDO curl -Lo "/usr/local/bin/wezterm"  https://github.com/wez/wezterm/releases/download/20230712-072601-f4abf8fd/WezTerm-20230712-072601-f4abf8fd-Ubuntu20.04.AppImage && $SUDO chmod +x "/usr/local/bin/wezterm"
  $SUDO   curl -Lo "/usr/local/bin/nvim"     https://github.com/neovim/neovim/releases/download/v0.9.1/nvim.appimage && $SUDO chmod +x /usr/local/bin/nvim
  git clone --depth=1                        https://github.com/astronvim/astronvim                                          "$HOME/.config/nvim"
  git clone --depth=1 --branch "v3.16.4"     https://github.com/spaceship-prompt/spaceship-prompt.git                        "$HOME/.config/spaceship"
  git clone --depth=1                        https://github.com/zsh-users/zsh-autosuggestions                                "$HOME/.config/zsh-autosuggestions"
  git clone --depth=1                        https://github.com/zdharma-continuum/fast-syntax-highlighting                   "$HOME/.config/fast-syntax-highlighting"
  git clone --depth=1                        https://github.com/occivink/mpv-gallery-view                                    "$HOME/.config/mpv"
  curl -L                                    https://raw.githubusercontent.com/jgreco/mpv-pdf/master/pdf_hook.lua         -o "$HOME/.config/mpv/scripts/pdf_hook.lua"
  curl -L                                    https://raw.githubusercontent.com/jgreco/mpv-pdf/master/pdf_hook-worker.lua  -o "$HOME/.config/mpv/scripts/pdf_hook-worker-1.lua"
  curl -L                                    https://raw.githubusercontent.com/jgreco/mpv-pdf/master/pdf_hook-worker.lua  -o "$HOME/.config/mpv/scripts/pdf_hook-worker-2.lua"
  curl -L                                    https://raw.githubusercontent.com/jgreco/mpv-pdf/master/pdf_hook-worker.lua  -o "$HOME/.config/mpv/scripts/pdf_hook-worker-3.lua"
  cp -r "${DOCKER_VOLUME:-..}/rice/user"                                                                                     "$HOME/.config/nvim/lua"
  cp    "${DOCKER_VOLUME:-..}/rice/lazy-lock.json"                                                                           "$HOME/.config/nvim"
}

[ "${TMUX_SIXEL:-}" == true ] && {
  [ -e /bin/pacman ] && $SUDO pacman -S --noconfirm ncurses libevent
  [ -e /bin/apt ] && $SUDO apt -y install -y autoconf automake bison build-essential flex libevent-dev libncurses-dev pkg-config
  git clone --depth=1 https://github.com/tmux/tmux.git "/tmp/tmux"
  cd "/tmp/tmux"
  sed -i "/case 64:/a\case 65:" tty-keys.c
  sh autogen.sh
  ./configure --enable-sixel && make
  $SUDO make install
}

#=============================== zsh configs ===========================================#

# source zsh plugins
cat <<"====" >> "$HOME/.zprofile"
    alias  ll="ls -lAhN --hyperlink=auto --color=auto --group-directories-first"
    alias  ls="ls -a --hyperlink=auto --color=auto --group-directories-first"
    alias  grep="grep --color=auto"
    alias  mkdir="mkdir -pv"
    alias  mv="mv -iv"
    alias  cp="cp -iv"
    export BAT_THEME="base16"
    export DISPLAY=:0
    export EDITOR="nvim"
    export HISTFILE="$HOME/.cache/history"
    export LANG=en_US.UTF-8
    export LESSKEYIN="$HOME/.config/lf/lesskey"
    export LF_ICONS=" tw=󰉋:or=:ex=:bd=:di=󰉋:ow=󰉋:ln=:fi="
    export LS_COLORS="tw=30:or=31:ex=32:bd=33:di=34:ow=35:ln=36:fi=37"
    export PAGER="less -r --use-color -Dd+r -Du+b -DPyk -DSyk"
    export PATH="$HOME/.local/bin:$PATH"
    export PROMPT_COMMAND='echo -ne "\033]0; ${${PWD/#$HOME/~}##*/} \a"'
    export SAVEHIST=1000000
    export SHELL="$(which zsh)"
    export SPACESHIP_DIR_COLOR="blue"
    export SPACESHIP_DIR_PREFIX="\033[34;1min "
    export SPACESHIP_GIT_PREFIX="\033[35;1mon "
    export SPACESHIP_DIR_TRUNC=9
    export SPACESHIP_PROMPT_ADD_NEWLINE="false"
    export SPACESHIP_PROMPT_SEPARATE_LINE="false"
    export SPACESHIP_USER_COLOR_ROOT="blue"
    export SPACESHIP_VI_MODE_SHOW="false"
    export TERM="xterm-256color"
    export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#555555"
    source /usr/share/fzf/key-bindings.zsh
    source /usr/share/fzf/completion.zsh
    source $HOME/.config/spaceship/spaceship.zsh
    source $HOME/.config/zsh-autosuggestions/zsh-autosuggestions.plugin.zsh
    source $HOME/.config/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh
    setopt interactive_comments
    precmd() { eval "$PROMPT_COMMAND" }
    [[ -e "/bin/apt" ]] && ! pidof -s nix-deamon >/dev/null 2>&1 && sudo /nix/var/nix/profiles/default/bin/nix-daemon &|
    [[ -z $TMUX ]] && [[ -z $NVIM ]] && export PTS=$TTY && sleep 1 && exec tmux -u
    [[ $USER != codespace ]] && [[ -e /.dockerenv ]] && export PTS=/dev/pts/0
    bindkey -v '^?' backward-delete-char
    function zle-keymap-select () {
        case $KEYMAP in
            vicmd) echo -ne '\e[2 q';;      # block
            viins|main) echo -ne '\e[6 q';; # beam
        esac
    }
    zle -N zle-keymap-select
    zle-line-init() {
        zle -K viins
        echo -ne "\e[6 q"
    }
    zle -N zle-line-init
    preexec() { echo -ne '\e[6 q' ;} # Use beam shape cursor for each new prompt.
    ## Basic auto/tab complete:
    autoload -U compinit && compinit -u
    zmodload zsh/complist
    zstyle ':completion:*' menu select
    _comp_options+=(globdots)		# Include hidden files.
    bindkey -M menuselect 'h' vi-backward-char
    bindkey -M menuselect 'l' vi-forward-char
    bindkey -M menuselect 'j' vi-down-line-or-history
    bindkey -M menuselect 'k' vi-up-line-or-history
    bindkey -v '^?' backward-delete-char
====

# zshrc for astronvim-terminal
if [ -e "$HOME/.bashrc" ]; then echo "/bin/zsh -l"           >> "$HOME/.bashrc"; fi;
if [ -e "$HOME/.zshrc" ]; then echo "source $HOME/.zprofile" >> "$HOME/.zshrc"; else ln -s "$HOME/.zprofile" "$HOME/.zshrc"; fi;

# use zsh as default shell
[ "$(id -u)" == 0 ] && export USER="root"
$SUDO chsh -s "$(which zsh)" "$USER"
sudo usermod -aG audio $USER

# LessKeys
mkdir -p "$HOME/.config/lf"
cat <<"====">> "$HOME/.config/lf/lesskey"
h left-scroll
l right-scroll
i quit
J forw-scroll
K back-scroll
====

# lfcd
cat <<"====">> "$HOME/.zprofile"
    [ -e /.dockerenv ] && [ "$(id -u)" != 0 ] && sudo chown "$USER":tty /dev/pts/0
    lfcd () {
      tmp="$(mktemp)"
      command lf -last-dir-path="$tmp" "$@"
      if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        if [ -d "$dir" ]; then
          if [ "$dir" != "$(pwd)" ]; then
            cd "$dir" && zle reset-prompt
          fi
        fi
      fi
    }
    zle -N lfcd < $PTS
    bindkey '\eo' 'lfcd'
====

#================================== lf configs ===========================================#

# lfrc
cat <<"====">> "$HOME/.config/lf/lfrc"
set icons
set hidden true
set ratios 1:2
set shell /bin/bash
set previewer ~/.config/lf/previewer
set cleaner ~/.config/lf/cleaner
set promptfmt "[1;34m%w "
set cursoractivefmt  "\033[40m" # "\033[7m\033[30m\033[46m"
set cursorparentfmt  "\033[40m" # "\033[7m\033[30m\033[46m"
set cursorpreviewfmt "\033[40m" # "\033[7m\033[30m\033[46m"

cmd on-cd &{{ printf "\033]0; $(TMP=${PWD/#$HOME/\~};echo ${TMP##*/}) \a" > $PTS }}

cmd open ${{
  case $(file --dereference --brief --mime-type $f) in
    text/*|application/json)         ( printf "\033]0; ${f##*/} \a" ) >$PTS && $EDITOR $fx ;;
    image/*|video/*|application/pdf)   XDG_RUNTIME_DIR=/run/user/1000 mpv --vo=x11 $fx || ( printf %b '\033Ptmux;\033''\033]777;notify;run "xhost +" outside docker/root;\007\007''\033\\'; XDG_RUNTIME_DIR=/run/user/1000 mpv --vo=sixel,kitty $fx) ;;
    *) for f in $fx; do gio open "$f" &>/dev/null & disown; done;;
  esac
}}

cmd fzf_ripgrep ${{
  IFS=: read -ra selected < <(
    rg --color=always --line-number --no-heading --smart-case "${*:-}" |
      fzf --ansi \
          --color "hl:-1:underline,hl+:-1:underline:reverse,bg+:#111111" \
          --delimiter : \
          --preview 'bat --color=always {1} --highlight-line {2}' \
          --preview-window 'up,60%,border-bottom,+{2}+3/3,~3'
  )
  [ -n "${selected[0]}" ] && lf -remote "send $id select \"${selected[0]}\""
  [ -n "${selected[0]}" ] && nvim "${selected[0]}" "+${selected[1]}"
}}

map gmt     $( timg -pi --loops=1 --frames=1        "$f" | less -rX           ) > $PTS || bat --paging=always --wrap=never "$f"
map i       $[[ "$f" =~ .png|.jpg ]] && ( img2sixel "$f" | less -r            ) > $PTS || bat --paging=always --wrap=never "$f"
map gmi     $[[ "$f" =~ .png|.jpg ]] && ( img2sixel "$f" | less -r            ) > $PTS || bat --paging=always --wrap=never "$f"
map o       $[[ "$f" =~ .pdf      ]] && ( convert "${f}[0]" sixel:- | less -r ) > $PTS || (      mpv --ao=null --vo-image-outdir=/tmp  --vo=image --start=1 --frames=1 "$f" && img2sixel /tmp/00000001.jpg | less -r ) > $PTS
map gmo     $[[ "$f" =~ .pdf      ]] && ( convert "${f}[0]" sixel:- | less -r ) > $PTS || (      mpv --ao=null --vo-image-outdir=/tmp  --vo=image --start=1 --frames=1 "$f" && img2sixel /tmp/00000001.jpg | less -r ) > $PTS
map gtd     $tmux detach -E                                      "XDG_RUNTIME_DIR=/run/user/1000 PATH=$HOME/.nix-profile/bin:$PATH mpv --vo=sixel,kitty,x11 $fx && tmux attach-session"
map gtp     $tmux popup -w 110 -h 37 -x 60 -y 1 -E               "XDG_RUNTIME_DIR=/run/user/1000 PATH=$HOME/.nix-profile/bin:$PATH mpv --vo=tct             $fx"
map gts     $tmux split-window -h && sleep 0.5 && tmux send-keys "XDG_RUNTIME_DIR=/run/user/1000 mpv                                   --vo=sixel,kitty,x11 $fx && exit" 'Enter'
map gtw     $tmux new-window      && sleep 0.5 && tmux send-keys "XDG_RUNTIME_DIR=/run/user/1000 mpv                                   --vo=sixel,kitty,x11 $fx && exit" 'Enter'
map gws     $wezterm cli split-pane --horizontal   -- bash -c    "XDG_RUNTIME_DIR=/run/user/1000 mpv                                   --vo=sixel,kitty,x11 $fx"
map gww     $wezterm cli spawn                     -- bash -c    "XDG_RUNTIME_DIR=/run/user/1000 mpv                                   --vo=sixel,kitty,x11 $fx"
map gll     $lazygit
map gfs     $lf -remote "send $id select \"$(fzf --bind='?:toggle-preview' --preview 'bat --color=always {}' --preview-window 'right,50%,border-left' < $PTS)\""
map gfr     :fzf_ripgrep
map <enter> shell
map D       $[ ! -e $HOME/.cache/Trash ] && ln -s $HOME/.local/share/Trash $HOME/.cache/Trash; gio trash $fx
map J       push 10j
map K       push 10k
map Y     $ printf "%s" "$fx" | xclip -selection clipboard
====

# lf previewer
cat <<"====">> "$HOME/.config/lf/previewer"
#!/bin/bash

case $(file --dereference --brief --mime-type $f) in
  image/*)                    ( img2sixel --loop-control=disable -w $((${2}*7)) "$f" )                                                                     > $PTS && exit 1 || echo "no libsixel :(" ;;
  # video/*|application/pdf)  ( timg -pi --loops=1 --frames=1 -g "$(($2 - 30))" "$f" )                                                                     > $PTS && exit 1 || echo "no timg :(" ;;
  application/pdf)            ( convert "${f}[0]" sixel:- )                                                                                                > $PTS && exit 1 || echo "no imagemagick :(" ;;
  video/*)                    ( mpv --really-quiet --ao=null --vo=image --vo-image-outdir=/tmp --start=10 --frames=1 "$f" && img2sixel /tmp/00000001.jpg ) > $PTS && exit 1 || echo "no mpv :(" ;;
  *) bat --style=plain --color=always "$f" || echo "no bat :(";;
esac

====

# lf cleaner
cat <<"====">> "$HOME/.config/lf/cleaner"
#!/bin/bash
pkill --signal SIGWINCH lf
====

# lf executables
chmod +x "$HOME"/.config/lf/{previewer,cleaner} \

#=================================== tmux configs ===========================================#

# tmux config
cat <<====>> "$HOME/.tmux.conf"
    set  -g  default-shell                /bin/zsh
    set  -g  mouse                        on
    set  -g  pane-active-border-style     bg=default,fg=gray
    set  -g  pane-border-style            fg=colour235
    set  -g  status                       off
    set  -g  allow-passthrough            on
    set  -ga status-style                 bg=default
    set  -ga status-style                 fg="#aaaaaa"
    set  -g  status-left                  ""
    set  -g  status-right                 ""
    set  -g  default-terminal             "tmux-256color"
    set  -g  window-status-current-format "#[bg=#1c1c1c,fg=#888888]#{window_index}:#{pane_title}"
    set  -g  window-status-format         "#[bg=default,fg=#2c2c2c]#{window_index}:#{pane_title}"
    set  -g  window-status-separator      " "
    setw -g  mode-keys                    vi
    bind -n  Home                         send Escape "OH"
    bind -n  End                          send Escape "OF"
    bind -T  copy-mode-vi y               send-keys -X copy-pipe-and-cancel "xclip -i -sel clip > /dev/null"
    bind -T  copy-mode-vi v               send-keys -X begin-selection
    bind -T  copy-mode-vi BTab            select-window -p
    bind -T  copy-mode-vi Tab             select-window -n
    bind -T  copy-mode-vi \;              select-window -l
    bind -n  C-M-l                        send-keys C-l \; run 'tmux clear-history'
    bind     Space                        copy-mode \; send-keys left left
    bind -n  C-M-Space                    copy-mode \; send-keys left left
    bind -n  C-M-h                        copy-mode \; send-keys left left
    bind -n  M-r                          copy-mode \; send-keys left left \; send-keys -X scroll-up
    bind -n  M-w                          copy-mode \; send-keys left left \; send-keys -X scroll-down
    bind -n  M-e                          copy-mode \; send-keys left left \; send-keys -X scroll-up
    bind -n  M-d                          copy-mode \; send-keys left left \; send-keys -X scroll-down
    bind -n  M-q                          copy-mode \; send-keys left left \; send-keys -X page-up
    bind -n  M-a                          copy-mode \; send-keys left left \; send-keys -X page-down
    bind -n  M-t                          copy-mode \; send-keys left left \; send-keys -X history-top
    bind -n  M-g                          copy-mode \; send-keys left left \; send-keys -X history-bottom
    bind -T  copy-mode-vi M-r             send-keys -X scroll-up
    bind -T  copy-mode-vi M-w             send-keys -X scroll-down
    bind -T  copy-mode-vi M-e             send-keys -X scroll-up
    bind -T  copy-mode-vi M-d             send-keys -X scroll-down
    bind -T  copy-mode-vi M-q             send-keys -X page-up
    bind -T  copy-mode-vi M-a             send-keys -X page-down
    bind -T  copy-mode-vi M-t             send-keys -X history-top
    bind -T  copy-mode-vi M-g             send-keys -X history-bottom
    bind -T  copy-mode-vi u               send-keys -X halfpage-up
    bind -T  copy-mode-vi d               send-keys -X halfpage-down
    bind -T  copy-mode-vi i               send-keys -X cancel
    bind -T  copy-mode-vi H               send-keys left  left  left  left  left  left  left  left  left  left
    bind -T  copy-mode-vi J               send-keys down  down  down  down  down  down  down  down  down  down
    bind -T  copy-mode-vi K               send-keys up    up    up    up    up    up    up    up    up    up
    bind -T  copy-mode-vi L               send-keys right right right right right right right right right right
    bind -n  C-M-b                        set -g status
    bind     b                            set -g status
    bind     c                            set -g status on \; new-window
    bind -n  C-t                          set -g status on \; new-window
    bind -n  C-w                          kill-pane
    bind     -                            swap-pane
    bind     +                            join-pane
    bind     x                            kill-pane
    bind -n  M-S                          swap-window -t -1\; select-window -t -1
    bind -n  M-F                          swap-window -t +1\; select-window -t +1
    bind -n  M-\;                         select-window -l
    bind -r  \;                           select-window -l
    bind -n  M-s                          select-window -p
    bind -n  M-f                          select-window -n
    bind -r  BTab                         select-window -p
    bind -r  Tab                          select-window -n
    bind -n  C-M-n                        select-window -n
    bind -n  C-M-p                        select-window -p
    bind -n  C-Left                       select-pane -L
    bind -n  C-Down                       select-pane -D
    bind -n  C-Up                         select-pane -U
    bind -n  C-Right                      select-pane -R
    bind -r  h                            select-pane -L
    bind -r  j                            select-pane -D
    bind -r  k                            select-pane -U
    bind -r  l                            select-pane -R
    bind -r  H                            resize-pane -L
    bind -r  J                            resize-pane -D
    bind -r  K                            resize-pane -U
    bind -r  L                            resize-pane -R
    bind -n  C-M-Left                     resize-pane -L
    bind -n  C-M-Down                     resize-pane -D
    bind -n  C-M-Up                       resize-pane -U
    bind -n  C-M-Right                    resize-pane -R
    bind     v                            split-window -h
    bind     V                            split-window -v
    bind -n  C-M-v                        split-window -h
    bind -n  C-M-h                        split-window -v
====
tput -T ansi setaf 2; echo Done!
